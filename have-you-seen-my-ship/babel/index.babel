// Threw this together really quickly. Could be made ~a zillion x
// more performant if we just drew each layer *once* to its own
// canvas (with a bit of overflow for wrapping) and animated those
// elements. I didn't do this because I'm lazy and bad.
// - rjs
const L = 600;
const NUM_LAYERS = 6;
const STAR_COLOR = [255, 255, 255];
const SPEED = 1 / 30;

const layerToNumStars = layer => Math.pow(2, NUM_LAYERS - layer);
const layerToRadius = layer => (layer + 1) * 1.1;
const layerToSpeed = layer => (layer + 1) * SPEED;

const drawShip = _ => {
	ctx.save();
	ctx.fillStyle = '#000';
	ctx.strokeStyle = '#121212';
	ctx.beginPath();
    ctx.moveTo(L * 16 / 20, L / 2);
    ctx.lineTo(L * 6 / 20, L * 7 / 20);
	ctx.lineTo(L * 6 / 20, L * 13 / 20);
	ctx.closePath();
    ctx.fill();
	ctx.stroke();
	ctx.restore();
};

const drawStars = (t, stars, layer) => {
	const xOffset = t * layerToSpeed(layer);
	stars.forEach(({r, x, y}) => {
		x = L - ((x + xOffset) % (L + r * 2) - r);
		ctx.beginPath();
		ctx.arc(x, y, r, 0, 2 * PI);
		ctx.fill();
	});
};

const {PI, floor} = Math;
const SPLIT_INDEX = floor(NUM_LAYERS / 2);
const container = document.querySelector('.container');
const social = document.querySelector('.social');
const canvas = document.createElement('canvas');
const ctx = canvas.getContext('2d');
canvas.width = canvas.height = L;
canvas.style.width = canvas.style.height = `${L / 2}px`;
ctx.fillStyle = `rgb(${STAR_COLOR})`;
social.style.color = `rgb(${STAR_COLOR})`;
social.style.borderColor = `rgba(${STAR_COLOR}, 1)`;

const layers = Array.from({length: NUM_LAYERS}, (_, layer) =>
    Array.from({length: layerToNumStars(layer)}, _ => {
        const r = layerToRadius(layer);
        const x = (L + 2 * r) * Math.random() - r;
        const y = (L + 2 * r) * Math.random() - r;
        return {r, x, y};
    }));

function draw (t) {
    ctx.clearRect(0, 0, L, L);
    // Draw the back layers first.
    layers.slice(0, SPLIT_INDEX).forEach(drawStars.bind(null, t));
    // Block the stars with our "ship".
    drawShip();
    // Draw the front layers.
    layers.slice(SPLIT_INDEX).forEach((stars, layer) => {
		drawStars(t, stars, layer + SPLIT_INDEX);
    });
    requestAnimationFrame(draw);
}
requestAnimationFrame(draw);
container.insertBefore(canvas, social);
